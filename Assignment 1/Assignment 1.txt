Assignment 1: Color Quantization and Connected Component Analysis
Part 1: Color Quantization:

Color quantization is the process of reducing the number of colors used in an image while trying to maintain the visual appearance of the original image. In general, it is a form of cluster analysis, if each RGB color value is considered as a coordinate triple in the 3D colorspace.  The following example shows an RGB image (~16 Million possible colors) quantized using 2,4,8,16,32 colors.



In your first assignment, you will be working on a Python implementation of basic image processing operations and color quantization techniques. 

You are going to write the function "quantize(img, K)" that takes two inputs and returns a single output. The first input is an RGB formatted image and the second one is the number of colors (K) in an image we aim to quantize. The function is supposed to calculate the quantized version of the image using the following method:

Convert input image to a matrix of pixels. Depending on your image size your matrix should be of size [height*width,3]
Pick K initial colors to begin quantization. Use the following methods to initialize your algorithm
Choose initial color centers manually, by clicking on the image: Using matplotlib librarys pyplot.ginput function, choose k points. Example code snippet to interactively select points from an image is provided at the end of this document.
Choose initial color centers randomly. Pick color centers randomly using numpys numpy.random.uniform function.
Using your own implementation of the k-means algorithm, cluster your color matrix and find K clusters and cluster centers. You may limit the maximum number of iterations to 10 or a suitable number depending on the size of your images.
Generate an output image. In the output image, each pixel should have the color of the cluster-center that pixel has been assigned to.
Once you are done with your image processing pipeline, you are going to experiment on the following images and present 2,4,8,16 and 32 color quantized versions of these images with both initialization methods in your report.

Bonus - 1: Try using K-means using an uniform color coordinate system (Lab colorspace)

Part 2: Connected Component Analysis:

In this assignment, we are going to be implementing a connected component analysis algorithm. In the connected component analysis, we begin with a color based thresholding of the image. Following noise removal with morphological operations, we are left with an image that contains connected and disconnected regions. We can count the number of distinct connected regions to determine the number of distinct objects on an image such as the number of birds in the below image. 
Image for postImage for post

In order to perform connected component analysis and count the number of objects in the images given below, you should implement the countConnectedComponents(img,threshold) function. The method takes an image and a threshold value as input and returns the number of objects in the image as output. The methods you should implement can be described as follows:
Read the given image and apply a thresholding function. The output of this function should give you a binary image where pixels have a value of [0,1] instead of [0-255].
If needed apply morphological erosion or dilation to clean salt&pepper noise.
Implement connected components analysis with 8 connected neighborhoods for each pixel. Traverse the image, going over all pixels to find foreground pixels. Once the first pixel of a connected component is found, all the connected pixels of that connected component are labeled before going onto the next pixel in the image.  Return the number of desired connected components. You may not use the functions present in the opencv (cv2) library or similar other